<?php

namespace Tests;

use App\Mapper\Material;
use Doctrine\ORM\EntityManager;

class CRUDMaterialTest extends BaseUnitTests
{

    /**
     * @var EntityManager
     */
    private $em;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->em = $this->_ci->get('database');
    }

    /**
     * @param Material $material
     * @test
     * @dataProvider dataFactory
     * @author Aldrea Malheiros Oliveira Rabelo
     */
    public function shouldCreateMaterial(Material $material) {

        $this->em->getRepository(Material::class)->saveOrUpdate($material);
        $this->assertTrue(is_numeric($material->getId()));

    }

    /**
     * @param Material $material
     * @test
     * @dataProvider dataFactory
     * @author Aldrea Malheiros Oliveira Rabelo
     */
    public function shouldSearchMaterial(Material $material) {

        $arrayMaterial = $this->em->getRepository(Material::class)->findForDescription($material->getDescricao());
        $material->setId($arrayMaterial[0]->getId());

        $this->assertEquals($arrayMaterial[0]->getDescricao(), $material->getDescricao());
        $this->assertEquals($arrayMaterial[0]->getQuantidade(), $material->getQuantidade());

    }

    /**
     * @param Material $material
     * @test
     * @dataProvider dataFactory
     * @author Aldrea Malheiros Oliveira Rabelo
     */
    public function shouldDestroyMaterial(Material $material) {

        $arrayMaterial = $this->em->getRepository(Material::class)->findForDescription($material->getDescricao());
        $material = $arrayMaterial[0];

        $this->em->getRepository(Material::class)->delete($material);

        $arrayMaterial = $this->em->getRepository(Material::class)->findForDescription($material->getDescricao());
        $this->assertCount(0, $arrayMaterial);

    }

    /**
     * @param Material $material
     * @test
     * @dataProvider dataFactory
     * @expectedException \Exception
     * @expectedExceptionMessage A quantidade nÃ£o pode ser negativa.
     * @author Aldrea Malheiros Oliveira Rabelo
     */
    public function shouldCreateMaterialGenerateExceptionNegativeStock(Material $material) {

        $material->setQuantidade(-1);
        $this->em->getRepository(Material::class)->saveOrUpdate($material);
        $this->assertTrue(is_numeric($material->getId()));

    }


    public function dataFactory() {
        $material = new Material();
        $material->setDescricao('Pudim');
        $material->setQuantidade(10);

        return [
            [$material]
        ];
    }

}